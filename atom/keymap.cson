# Your keymap
#
# Atom keymaps work similarly to style sheets. Just as style sheets use
# selectors to apply styles to elements Atom keymaps use selectors to associate
# keystrokes with events in specific contexts. Unlike style sheets however
# each selector can only be declared once.
#
# You can create a new keybinding in this file by typing "key" and then hitting
# tab.
#
# Here"s an example taken from Atom"s built-in keymap:
#
# "atom-text-editor":
#   "enter": "editor:newline"
#
# "atom-workspace":
#   "ctrl-shift-p": "core:move-up"
#   "ctrl-p": "core:move-down"
#
# You can find more information about keymaps in these guides:
# * http://flight-manual.atom.io/using-atom/sections/basic-customization/#_customizing_keybindings
# * http://flight-manual.atom.io/behind-atom/sections/keymaps-in-depth/
#
# If you"re having trouble with your keybindings not working try the
# Keybinding Resolver: `Cmd+.` on macOS and `Ctrl+.` on other platforms. See the
# Debugging Guide for more information:
# * http://flight-manual.atom.io/hacking-atom/sections/debugging/#check-the-keybindings
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON you can read more about it in the
# Atom Flight Manual:
# http://flight-manual.atom.io/using-atom/sections/basic-customization/#_cson

"atom-workspace":
  "ctrl-s": "core:save"

  ": :": "command-palette:toggle"

  "space f": "fuzzy-finder:toggle-file-finder"
  ", f": "fuzzy-finder:toggle-file-finder"

  "space b": "fuzzy-finder:toggle-buffer-finder"
  ", b": "fuzzy-finder:toggle-buffer-finder"

  "space v": "pane:split-right"
  ", v": "pane:split-right"

  "space o": "advanced-open-file:toggle"
  ", o": "advanced-open-file:toggle"

  "space d": "demo-mode:toggle"
  ", d": "demo-mode:toggle"

  "space g": "github:toggle-git-tab"
  ", g": "github:toggle-git-tab"

  "space l n": "linter-ui-default:next-error"
  ", l n": "linter-ui-default:next-error"

  "cmd-t t": "platformio-ide-terminal:toggle"
  "cmd-t c": "platformio-ide-terminal:new"
  "cmd-t n": "platformio-ide-terminal:next"
  "cmd-t p": "platformio-ide-terminal:previous"
  "cmd-t r": "platformio-ide-terminal:rename"
  "cmd-t x": "platformio-ide-terminal:close"

"atom-text-editor.vim-mode-plus:not(.insert-mode)":
  "space c": "editor:toggle-line-comments"
  ", c": "editor:toggle-line-comments"

  "space t": "toggler:toggle"
  ", t": "toggler:toggle"


#-------------------------------------------------------------------------------
# Overriding some vim-mode keybindings
#-------------------------------------------------------------------------------

"atom-text-editor.vim-mode-plus-input-char-waiting":
  ":": "vim-mode-plus:set-input-char-:"
  "space": "vim-mode-plus:set-input-char-space"
  ",": "vim-mode-plus:set-input-char-,"

"atom-text-editor.vim-mode-plus.insert-mode, atom-text-editor:not(.vim-mode-plus):not(.vim-mode-plus-input-char-waiting), .terminal-view":
  ":": "native!"
  "space": "native!"
  ",": "native!"

"atom-text-editor.vim-mode-plus.normal-mode":
  "enter": "vim-mode-plus:add-blank-line-below"
  "shift-enter": "vim-mode-plus:add-blank-line-above"

# Overriding this very specific vim-mode-plus selector til I find a better way.
".platform-darwin atom-text-editor.vim-mode-plus:not(.insert-mode)":
  "ctrl-s": "core:save"

"atom-text-editor.autocomplete-active":
  "tab": "core:move-down"
